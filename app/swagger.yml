swagger: '2.0'
info:
  description: |
    This is an API used to train, evaluate, and operate unsupervised topic models.
    Source code: [http://github.com/kandakji/ted-talk-topic-extraction](https://github.com/kandakji/ted-talk-topic-extraction).
  version: 1.0.0
  title: Topic Model API
host: 'hyperted.eurecom.fr'
basePath: /topic/api
schemes:
- http
tags:
- name: lda
  description: Latent Dirichlet Allocation Topic Model - Mallet Package
- name: lftm
  description: Latent Feature Topic Model
- name: ntm
  description: Neural Topic Model
- name: gsdmm
  description:  Gibbs sampling algorithm for a Dirichlet Mixture Model
  
paths:
  /lda/train:
    post:
      tags:
      - lda
      summary: Train LDA model
      operationId: trainLDA
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/LDA'
      responses:
        200:
          description: Training Complete
        400:
          description: Invalid Input or Error Occured
          
  /lda/predict:
    post:
      tags:
      - lda
      summary: Predict for new document
      operationId: predict
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: A text (sentence, paragraph, ...)
        required: true
        schema:
          $ref: '#/definitions/DOC'
      responses:
        200:
          description: Prediction Complete
        400:
          description: Invalid Input or Error Occured
    
  /lda/topics:
    get:
      tags:
      - lda
      summary: Get topic words
      operationId: topicsLDA
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        400:
          description: An error occured
          
  /lda/coherence:
    post:
      tags:
      - lda
      summary: Get Topic Coherences
      operationId: coherenceLDA
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/DATA'
      responses:
        200:
          description: Coherence Computed
        400:
          description: Invalid Input or Error Occured
  /lftm/train:
    post:
      tags:
      - lftm
      summary: Train LFTM model
      operationId: trainLFTM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/LFTM'
      responses:
        200:
          description: Training Complete
        400:
          description: Invalid Input or Error Occured
          
  /lftm/predict:
    post:
      tags:
      - lftm
      summary: Predict for new document
      operationId: predictLFTM
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: A text (sentence, paragraph, ...)
        required: true
        schema:
          $ref: '#/definitions/DOC'
      responses:
        200:
          description: Prediction Complete
        400:
          description: Invalid Input or Error Occured
    
  /lftm/topics:
    get:
      tags:
      - lftm
      summary: Get topic words
      operationId: topicsLFTM
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        400:
          description: An error occured
          
  /lftm/coherence:
    post:
      tags:
      - lftm
      summary: Get Topic Coherences
      operationId: coherenceLFTM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/DATA'
      responses:
        200:
          description: Coherence Computed
        400:
          description: Invalid Input or Error Occured

  /ntm/train:
    post:
      tags:
      - ntm
      summary: Train NTM model
      operationId: trainNTM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/NTM'
      responses:
        200:
          description: Training Complete
        400:
          description: Invalid Input or Error Occured
          
  /ntm/predict:
    post:
      tags:
      - ntm
      summary: Predict for new document
      operationId: predictNTM
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: A text (sentence, paragraph, ...)
        required: true
        schema:
          $ref: '#/definitions/DOC'
      responses:
        200:
          description: Prediction Complete
        400:
          description: Invalid Input or Error Occured
      deprecated: True
    
  /ntm/topics:
    get:
      tags:
      - ntm
      summary: Get topic words
      operationId: topicsNTM
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        400:
          description: An error occured
          
  /ntm/coherence:
    post:
      tags:
      - ntm
      summary: Get Topic Coherences
      operationId: coherenceNTM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/DATA'
      responses:
        200:
          description: Coherence Computed
        400:
          description: Invalid Input or Error Occured
          
  /gsdmm/train:
    post:
      tags:
      - gsdmm
      summary: Train GSDMM model
      operationId: trainGSDMM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/GSDMM'
      responses:
        200:
          description: Training Complete
        400:
          description: Invalid Input or Error Occured
          
  /gsdmm/predict:
    post:
      tags:
      - gsdmm
      summary: Predict for new document
      operationId: predictGSDMM
      parameters:
      - in: body
        name: body
        description: A text (sentence, paragraph, ...)
        required: true
        schema:
          $ref: '#/definitions/DOC'
      responses:
        200:
          description: Prediction Complete
        400:
          description: Invalid Input or Error Occured
    
  /gsdmm/topics:
    get:
      tags:
      - gsdmm
      summary: Get topic words
      operationId: topicsGSDMM
      produces:
      - application/json
      responses:
        200:
          description: successful operation
        400:
          description: An error occured
          
  /gsdmm/coherence:
    post:
      tags:
      - gsdmm
      summary: Get Topic Coherences
      operationId: coherenceGSDMM
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Model parameters and hyper-parameters
        required: true
        schema:
          $ref: '#/definitions/DATA'
      responses:
        200:
          description: Coherence Computed
        400:
          description: Invalid Input or Error Occured

definitions:
  LDA:
    type: object
    properties:
      datapath:
        type: string
        example: "/app/data/data.txt"
      num_topics:
        type: string
        example: "25"
      alpha:
        type: string
        example: "0.1"
      iterations:
        type: string
        example: "800"
      optimize_interval:
        type: string
        example: "10"
      topic_threshold:
        type: string
        example: "0"
      random_seed:
        type: string
        example: "5"
        
  LFTM:
    type: object
    properties:
      datapath:
        type: string
        example: "/app/data/data.txt"
      ntopics:
        type: string
        example: "25"
      alpha:
        type: string
        example: "0.1"
      beta:
        type: string
        example: "0.1"
      lambda:
        type: string
        example: "1"
      initer:
        type: string
        example: "600"
      niter:
        type: string
        example: "100"
      topn:
        type: string
        example: "10"
        
  NTM:
    type: object
    properties:
      datapath:
        type: string
        example: "/app/data/data.txt"
      n_topics:
        type: string
        example: "25"
      batch_size:
        type: string
        example: "6144"
      n_epochs:
        type: string
        example: "50"
      lr:
        type: string
        example: "0.05"
      l1_doc:
        type: string
        example: "0.000002"
      l1_word:
        type: string
        example: "0.000000015"
      word_dim:
        type: string
        example: "0"
        
  GSDMM:
    type: object
    properties:
      datapath:
        type: string
        example: "/app/data/data.txt"
      num_topics:
        type: string
        example: "25"
      alpha:
        type: string
        example: "0.1"
      beta:
        type: string
        example: "0.1"
      n_iter:
        type: string
        example: "10"
        
  DOC:
    type: string
    example: "Climate change is a global environmental issue that is affecting the lands, the oceans, the animals, and humans"
        
  DATA:
    type: object
    properties:
      datapath:
        type: string
        example: "/app/data/data.txt"
      metric:
        type: string
        example: "c_v"


